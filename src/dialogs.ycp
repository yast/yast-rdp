/**
 * File:	remote/dialogs.ycp
 * Module:	Network configuration
 * Summary:	Dialog for Remote RDP Administration
 * Authors:	Arvin Schnell <arvin@suse.de>
 *		David Reveman <davidr@novell.com>
 */

{

textdomain "rdp";

import "Label";
import "RDP";
import "Wizard";
import "CWMFirewallInterfaces";

include "network/routines.ycp";

/**
 * Remote administration dialog
 * @return dialog result
 */
define symbol RemoteMainDialog() {

    /* Ramote Administration dialog caption */
    string caption = _("Remote Administration");

    term allow_buttons = `RadioButtonGroup(
	`VBox (
	    /* RadioButton label */
	    `Left(`RadioButton(`id(`allow), _("&Allow Remote Administration"), false)),
	    /* RadioButton label */
	    `Left(`RadioButton(`id(`disallow), _("&Do Not Allow Remote Administration"), false))
	)
    );

    map<string,any> firewall_widget = CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
	"services" : [ "service:xrdp" ],
	"display_details" : true,
    ]);
    term firewall_layout = firewall_widget["custom_widget"]:`VBox ();
    string firewall_help = firewall_widget["help"]:"";

    string help = sformat (
_("<p><b><big>Remote Administration Settings</big></b></p>
<p>If this feature is enabled, you can
administer this machine remotely from another machine. Use a RDP
client, such as rdesktop (connect to <tt>&lt;hostname&gt;:%1</tt>).
This form of remote administration is less secure than using SSH.</p>
"), 3389) + firewall_help;

    /* Remote Administration dialog contents */
    term contents = `HBox(
	`HStretch(),
	`VBox (
	    `Frame (
		/* Dialog frame title */
		_("Remote Administration Settings"),
		allow_buttons
	    ),
	    `VSpacing (1),
	    `Frame (
		/* Dialog frame title */
		_("Firewall Settings"),
		firewall_layout
	    )
	),
	`HStretch()
    );

    Wizard::SetContentsButtons(caption, contents, help,
	    Label::BackButton(), Label::FinishButton());

    UI::ChangeWidget(`id(`allow), `Value, RDP::allow_administration);
    UI::ChangeWidget(`id(`disallow), `Value, !RDP::allow_administration);

    CWMFirewallInterfaces::OpenFirewallInit (firewall_widget, "");

    any ret = nil;
    map event = nil;

    repeat {
	event = UI::WaitForEvent ();
	ret = event["ID"]:nil;

	CWMFirewallInterfaces::OpenFirewallHandle (firewall_widget, "", event);

	if(ret == `abort)
	{
	    break;
	}
	else if(ret == `help)
	{
	    Wizard::ShowHelp(help);
	}
	else if(ret == `cancel)
	{
	   break;
	}

    } until( ret == `next || ret == `back );

    if(ret == `next)
    {
	CWMFirewallInterfaces::OpenFirewallStore (firewall_widget, "", event);
	RDP::allow_administration = (boolean) UI::QueryWidget(`id(`allow), `Value);
    }

    return (symbol) ret;
}

/* EOF */
}

